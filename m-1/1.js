/*
 * @Author: your name
 * @Date: 2021-06-28 16:01:46
 * @LastEditTime: 2021-06-29 14:16:02
 * @LastEditors: Please set LastEditors
 * @Description: 数据结构
 * @FilePath: \learn-my-first-algorithm-book\1\1-1.js
 * 
 */

/**
 * 0、什么是数据结构
 * 
 * 数据存储于内存时，决定了数据顺序和位置关系的便是“数据结构”
 * 
 */

/**
 * 1、链表（线性排列）
 * 通过指针寻找内存地址
 * 
 * 顺序访问，需要从头部指针开始找，消耗时间O(n)
 * 添加，直接更改指针方向，消耗时间O(1)
 * 删除，直接更改指针方向，消耗时间O(1)
 * 
 * 环形链表：尾部指针指向头部
 * 双向链表：指针指向前后数据
 * 
 */

/***
 * 2、数组（线性排列）
 * 通过下标寻找内存地址
 *  
 * 随机访问，直接通过下标，消耗时间O(1)
 * 添加，一个一个移动，消耗时间O(n)
 * 删除，一个一个移动，消耗时间O(n)
 * 
 */

/**
 * 3、栈（线性排列）
 * 后进先出
 * 
 * 只能访问顶端数据
 * 添加或删除只能在顶端进行
 */

/**
 * 4、队列（线性排列）
 * 先进先出
 * 
 * 只能访问出队的一端首位数据
 * 添加，即入队
 * 删除，即出队
 * 
 */

/**
 * 5、哈希表（线性排列）
 * 
 * 键，值组合
 * 利用哈希函数把键计算成哈希值，通过哈希值访问数组中目标数据，如果发生哈希冲突，使用链表进行存储
 * 
 * 发生冲突：连地址法，开放地址法
 */

/**
 * 6、堆（图的树形结构）
 * 
 * 数据存储在节点中
 * 节点最多只能有两个子节点
 * 子节点必须要大于父节点
 * 从最小值按顺序取（最上面）
 * 添加时加到最左端
 */

/**
 * 7、二叉查找树（图的树形结构）
 * 
 * 数据存储在节点中
 * 节点最多只能有两个子节点
 * 
 * 每个节点值均大于其左子树上任意一个节点的值
 * 每个节点值均小于其右子树上任意一个节点的值
 * 
 */