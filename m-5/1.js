/*
 * @Author: your name
 * @Date: 2021-06-30 15:55:44
 * @LastEditTime: 2021-07-01 15:59:41
 * @LastEditors: Please set LastEditors
 * @Description: 安全算法
 * @FilePath: \learn-my-first-algorithm-book\m-5\1.js
 */
/**
 * 1、传输数据的问题及解决方法
 * 
 * 窃听：加密
 * 假冒：消息认证码 或 数字签名
 * 篡改：消息认证码 或 数字签名
 * 事后否认：数字签名
 * 
 */

/**
 * 2、加密基础知识
 * 
 * 加密：数据经过密钥运算后，变成第三者计算机无法理解的形式的过程
 * 解密：密文经过密钥运算后，恢复成原本数据的过程
 * 
 */

/**
 * 3、哈希函数
 * 把给定的数据转换成固定长度的无规律数值
 * 
 * 特征：
 * 输出的哈希值长度固定不变
 * 输入连个相同的数据，输出的哈希值也必定相同
 * 输入两个相似的数据，输出的哈希值也大不相同(不会相似)
 * 输入两个完全不同的数据，输出的哈希值也有可能相同(概率极低)
 * 不可能从哈希值反推原本的数据(不可逆)
 * 求哈希值的计算相对容易
 * 
 * 常见哈希算法：
 * MD5、SHA-1、SHA-2  (其中SHA-2应用较广泛，MD5和SHA-1存在安全隐患不推荐使用)
 */

/**
 * 4、共享密钥加密（对称加密）
 * 使用的密钥相同
 * 
 * 常见共享密钥加密算法：
 * 凯撒密钥、AES、DES、动态口令（其中AES应用较广泛）
 * 
 * 存在问题：
 * 密钥也会被拦截
 * 问题原因：
 * 需要请求者把密钥发送给接收者
 * 问题解决：
 * 使用公开密钥加密
 */

/**
 * 5、公开密钥加密（非对称加密）
 * 使用的密钥不同
 * 
 * 加密密钥：公开密钥
 * 解密密钥：私有密钥
 * 
 * 常见公开密钥加密算法：
 * RSA、椭圆曲线加密（其中RAS应用广泛）
 * 
 * 存在问题1：
 * 公开密钥可靠性（有可能是窃听者伪造的）（中间人攻击）
 * 问题原因1：
 * 请求者无法判断公开密钥是否来自接收者
 * 
 * 存在问题2：
 * 加解密速度慢
 */

/**
 * 6、混合密钥加密
 * 加密密钥：使用共享密钥，但需用公开密钥加密进行处理
 * 
 * 已应用于SSL生成
 */

/**
 * 7、迪菲-赫尔曼密钥交换
 * 密钥合成新密钥
 */

/**
 * 8、消息认证码（MAC）
 * 由密钥和密文组成的字符串哈希值，用于检测密文是否被篡改
 * 
 * 计算MAC的算法
 * HMAC、OMAC、CMAC（其中HMAC应用较广泛）
 * 
 * 存在问题：
 * 无法证明原本的消息是谁生成的，发送消息者可以否认是自己发送的
 * 问题解决：
 * 使用数字签名
 */

/**
 * 9、数字签名
 * 
 * 数字签名只能有发送者生成
 * 数字签名的生成使用的是公开密钥加密
 * 由发送者准备公开密钥和私有密钥
 * 发送者将公开密钥发送给接收者
 * 发送者使用私有密钥加密消息，加密后的消息就是数字签名
 * 接收者使用公开密钥对签名进行解密
 * 
 * 存在问题：
 * 公开密钥有可能有某个冒充发送者的人生成的
 * 问题解决：
 * 使用数字证书
 */

/**
 * 10、数字证书
 * 
 * 认证中心是管理数字证书的组织机构
 * 发送者将公开密钥及个人资料发送给认证中心
 * 认证中心使用自己的私有密钥将其生成为数字签名，并将签名和个人资料放入同一个文件，作为数字证书
 * 发送者将数字证书作为公开密钥发送给接收者
 * 接收者根据证书中的个人资料确认发送者，并向认证中心获取公开密钥用于验证数字签名,验证其确实由认证中心发行
 * 确认后从证书中取出发送者的公开密钥，解密消息
 * 
 * 问题：
 * 认证中心可以被冒充吗？
 * 回答：
 * 认证中心有更高级的认证中心检测，最高级的一般为大型企业或政府单位，如果最高级的认证中心不被信任，那认证中心结构就无法成立
 * 
 */